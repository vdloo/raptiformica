{
  "compute_types":
  {
    "vagrant":
    {
      "headless":
      {
        "source": "https://github.com/vdloo/vagrantfiles",
        "start_instance_command": "cd headless && vagrant up --provider=virtualbox",
        "hostname_get_command": "cd headless && vagrant ssh-config | grep HostName | awk '{print$NF}'",
        "port_get_command": "cd headless && vagrant ssh-config | grep Port | awk '{print$NF}'",
        "detect_stale_instance_command": "cd headless && vagrant status | grep running",
        "clean_up_instance_command": "cd headless && vagrant destroy -f"
      },
      "workstation":
      {
        "source": "https://github.com/vdloo/vagrantfiles",
        "start_instance_command": "cd gui && vagrant up --provider=virtualbox",
        "hostname_get_command": "cd gui && vagrant ssh-config | grep HostName | awk '{print$NF}'",
        "port_get_command": "cd gui && vagrant ssh-config | grep Port | awk '{print$NF}'",
        "detect_stale_instance_command": "cd headless && vagrant status | grep running",
        "clean_up_instance_command": "cd headless && vagrant destroy -f"
      },
      "htpc":
      {
        "source": "https://github.com/vdloo/vagrantfiles",
        "start_instance_command": "cd gui && vagrant up --provider=virtualbox",
        "hostname_get_command": "cd gui && vagrant ssh-config | grep HostName | awk '{print$NF}'",
        "port_get_command": "cd gui && vagrant ssh-config | grep Port | awk '{print$NF}'",
        "detect_stale_instance_command": "cd gui && vagrant status | grep running",
        "clean_up_instance_command": "cd gui && vagrant destroy -f"
      }
    },
    "docker":
    {
      "headless":
      {
        "source": "https://github.com/vdloo/dockerfiles",
        "start_instance_command": "cd ubuntu64 && chmod 0600 insecure_key && ssh-add insecure_key && sudo docker build -t raptiformica-baseimage . && sudo docker run --privileged -d raptiformica-baseimage > container_id && sleep 5",
        "hostname_get_command": "bash -c \"cd ubuntu64 && sudo docker inspect -f '{{ .NetworkSettings.IPAddress }}' $(cat ubuntu64/container_id)\" | tail -n 1",
        "port_get_command": "echo 22",
        "detect_stale_instance_command": "[ -f ubuntu64/container_id ] && sudo docker ps --no-trunc | grep -f ubuntu64/container_id",
        "clean_up_instance_command": "[ -f ubuntu64/container_id ] && cat ubuntu64/container_id | xargs sudo docker rm -f || /bin/true"
      },
      "workstation":
      {
        "source": "https://github.com/vdloo/dockerfiles",
        "start_instance_command": "cd ubuntu64 && chmod 0600 insecure_key && ssh-add insecure_key && sudo docker build -t raptiformica-baseimage . && sudo docker run --privileged -d raptiformica-baseimage > container_id && sleep 5",
        "hostname_get_command": "bash -c \"cd ubuntu64 && sudo docker inspect -f '{{ .NetworkSettings.IPAddress }}' $(cat ubuntu64/container_id)\" | tail -n 1",
        "port_get_command": "echo 22",
        "detect_stale_instance_command": "[ -f ubuntu64/container_id ] && /bin/false || sudo docker ps --no-trunc | grep -f ubuntu64/container_id",
        "clean_up_instance_command": "[ -f ubuntu64/container_id ] && cat ubuntu64/container_id | xargs sudo docker rm -f || /bin/true"
      },
      "htpc":
      {
        "source": "https://github.com/vdloo/dockerfiles",
        "start_instance_command": "cd ubuntu64 && chmod 0600 insecure_key && ssh-add insecure_key && sudo docker build -t raptiformica-baseimage . && sudo docker run --privileged -d raptiformica-baseimage > container_id && sleep 5",
        "hostname_get_command": "bash -c \"cd ubuntu64 && sudo docker inspect -f '{{ .NetworkSettings.IPAddress }}' $(cat ubuntu64/container_id)\" | tail -n 1",
        "port_get_command": "echo 22",
        "detect_stale_instance_command": "[ -f ubuntu64/container_id ] && /bin/false || sudo docker ps --no-trunc | grep -f ubuntu64/container_id",
        "clean_up_instance_command": "[ -f ubuntu64/container_id ] && cat ubuntu64/container_id | xargs sudo docker rm -f || /bin/true"
      }
    }
  },
  "server_types":
  {
    "headless":
    {
      "source": "https://github.com/vdloo/puppetfiles",
      "name": "puppetfiles",
      "bootstrap_command": "./papply.sh manifests/headless.pp"
    },
    "workstation":
    {
      "source": "https://github.com/vdloo/puppetfiles",
      "name": "puppetfiles",
      "bootstrap_command": "./papply.sh manifests/workstation.pp"
    },
    "htpc":
    {
      "source": "https://github.com/vdloo/puppetfiles",
      "name": "puppetfiles",
      "bootstrap_command": "./papply.sh manifests/htpc.pp"
    }
  },
  "meshnet": {
      "cjdns": {},
      "consul": {},
      "neighbours": {}
  }
}
